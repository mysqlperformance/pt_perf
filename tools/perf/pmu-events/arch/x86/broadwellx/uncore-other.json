[
    {
        "BriefDescription": "Total Write Cache Occupancy; Any Source",
        "EventCode": "0x12",
        "EventName": "UNC_I_CACHE_TOTAL_OCCUPANCY.ANY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of reads and writes that are outstanding in the uncore in each cycle.  This is effectively the sum of the READ_OCCUPANCY and WRITE_OCCUPANCY events.; Tracks all requests from any source port.",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Total Write Cache Occupancy; Select Source",
        "EventCode": "0x12",
        "EventName": "UNC_I_CACHE_TOTAL_OCCUPANCY.SOURCE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of reads and writes that are outstanding in the uncore in each cycle.  This is effectively the sum of the READ_OCCUPANCY and WRITE_OCCUPANCY events.; Tracks only those requests that come from the port specified in the IRP_PmonFilter.OrderingQ register.  This register allows one to select one specific queue.  It is not possible to monitor multiple queues at a time.",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Clocks in the IRP",
        "EventName": "UNC_I_CLOCKTICKS",
        "PerPkg": "1",
        "PublicDescription": "Number of clocks in the IRP.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Coherent Ops; CLFlush",
        "EventCode": "0x13",
        "EventName": "UNC_I_COHERENT_OPS.CLFLUSH",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of coherency related operations servied by the IRP",
        "UMask": "0x80",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Coherent Ops; CRd",
        "EventCode": "0x13",
        "EventName": "UNC_I_COHERENT_OPS.CRD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of coherency related operations servied by the IRP",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Coherent Ops; DRd",
        "EventCode": "0x13",
        "EventName": "UNC_I_COHERENT_OPS.DRD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of coherency related operations servied by the IRP",
        "UMask": "0x4",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Coherent Ops; PCIDCAHin5t",
        "EventCode": "0x13",
        "EventName": "UNC_I_COHERENT_OPS.PCIDCAHINT",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of coherency related operations servied by the IRP",
        "UMask": "0x20",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Coherent Ops; PCIRdCur",
        "EventCode": "0x13",
        "EventName": "UNC_I_COHERENT_OPS.PCIRDCUR",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of coherency related operations servied by the IRP",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Coherent Ops; PCIItoM",
        "EventCode": "0x13",
        "EventName": "UNC_I_COHERENT_OPS.PCITOM",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of coherency related operations servied by the IRP",
        "UMask": "0x10",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Coherent Ops; RFO",
        "EventCode": "0x13",
        "EventName": "UNC_I_COHERENT_OPS.RFO",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of coherency related operations servied by the IRP",
        "UMask": "0x8",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Coherent Ops; WbMtoI",
        "EventCode": "0x13",
        "EventName": "UNC_I_COHERENT_OPS.WBMTOI",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of coherency related operations servied by the IRP",
        "UMask": "0x40",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 0; Cache Inserts of Atomic Transactions as Secondary",
        "EventCode": "0x14",
        "EventName": "UNC_I_MISC0.2ND_ATOMIC_INSERT",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_MISC0.2ND_ATOMIC_INSERT",
        "UMask": "0x10",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 0; Cache Inserts of Read Transactions as Secondary",
        "EventCode": "0x14",
        "EventName": "UNC_I_MISC0.2ND_RD_INSERT",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_MISC0.2ND_RD_INSERT",
        "UMask": "0x4",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 0; Cache Inserts of Write Transactions as Secondary",
        "EventCode": "0x14",
        "EventName": "UNC_I_MISC0.2ND_WR_INSERT",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_MISC0.2ND_WR_INSERT",
        "UMask": "0x8",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 0; Fastpath Rejects",
        "EventCode": "0x14",
        "EventName": "UNC_I_MISC0.FAST_REJ",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_MISC0.FAST_REJ",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 0; Fastpath Requests",
        "EventCode": "0x14",
        "EventName": "UNC_I_MISC0.FAST_REQ",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_MISC0.FAST_REQ",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 0; Fastpath Transfers From Primary to Secondary",
        "EventCode": "0x14",
        "EventName": "UNC_I_MISC0.FAST_XFER",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_MISC0.FAST_XFER",
        "UMask": "0x20",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 0; Prefetch Ack Hints From Primary to Secondary",
        "EventCode": "0x14",
        "EventName": "UNC_I_MISC0.PF_ACK_HINT",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_MISC0.PF_ACK_HINT",
        "UMask": "0x40",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 0; Prefetch TimeOut",
        "EventCode": "0x14",
        "EventName": "UNC_I_MISC0.PF_TIMEOUT",
        "PerPkg": "1",
        "PublicDescription": "Indicates the fetch for a previous prefetch wasn't accepted by the prefetch.   This happens in the case of a prefetch TimeOut",
        "UMask": "0x80",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 1; Data Throttled",
        "EventCode": "0x15",
        "EventName": "UNC_I_MISC1.DATA_THROTTLE",
        "PerPkg": "1",
        "PublicDescription": "IRP throttled switch data",
        "UMask": "0x80",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 1",
        "EventCode": "0x15",
        "EventName": "UNC_I_MISC1.LOST_FWD",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_MISC1.LOST_FWD",
        "UMask": "0x10",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 1; Received Invalid",
        "EventCode": "0x15",
        "EventName": "UNC_I_MISC1.SEC_RCVD_INVLD",
        "PerPkg": "1",
        "PublicDescription": "Secondary received a transfer that did not have sufficient MESI state",
        "UMask": "0x20",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 1; Received Valid",
        "EventCode": "0x15",
        "EventName": "UNC_I_MISC1.SEC_RCVD_VLD",
        "PerPkg": "1",
        "PublicDescription": "Secondary received a transfer that did have sufficient MESI state",
        "UMask": "0x40",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 1; Slow Transfer of E Line",
        "EventCode": "0x15",
        "EventName": "UNC_I_MISC1.SLOW_E",
        "PerPkg": "1",
        "PublicDescription": "Secondary received a transfer that did have sufficient MESI state",
        "UMask": "0x4",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 1; Slow Transfer of I Line",
        "EventCode": "0x15",
        "EventName": "UNC_I_MISC1.SLOW_I",
        "PerPkg": "1",
        "PublicDescription": "Snoop took cacheline ownership before write from data was committed.",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 1; Slow Transfer of M Line",
        "EventCode": "0x15",
        "EventName": "UNC_I_MISC1.SLOW_M",
        "PerPkg": "1",
        "PublicDescription": "Snoop took cacheline ownership before write from data was committed.",
        "UMask": "0x8",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Misc Events - Set 1; Slow Transfer of S Line",
        "EventCode": "0x15",
        "EventName": "UNC_I_MISC1.SLOW_S",
        "PerPkg": "1",
        "PublicDescription": "Secondary received a transfer that did not have sufficient MESI state",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "AK Ingress Occupancy",
        "EventCode": "0xA",
        "EventName": "UNC_I_RxR_AK_INSERTS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the AK Ingress.  This queue is where the IRP receives responses from R2PCIe (the ring).",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "UNC_I_RxR_BL_DRS_CYCLES_FULL",
        "EventCode": "0x4",
        "EventName": "UNC_I_RxR_BL_DRS_CYCLES_FULL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the BL Ingress is full.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "BL Ingress Occupancy - DRS",
        "EventCode": "0x1",
        "EventName": "UNC_I_RxR_BL_DRS_INSERTS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the BL Ingress.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "UNC_I_RxR_BL_DRS_OCCUPANCY",
        "EventCode": "0x7",
        "EventName": "UNC_I_RxR_BL_DRS_OCCUPANCY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the BL Ingress in each cycles.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "UNC_I_RxR_BL_NCB_CYCLES_FULL",
        "EventCode": "0x5",
        "EventName": "UNC_I_RxR_BL_NCB_CYCLES_FULL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the BL Ingress is full.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "BL Ingress Occupancy - NCB",
        "EventCode": "0x2",
        "EventName": "UNC_I_RxR_BL_NCB_INSERTS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the BL Ingress.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "UNC_I_RxR_BL_NCB_OCCUPANCY",
        "EventCode": "0x8",
        "EventName": "UNC_I_RxR_BL_NCB_OCCUPANCY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the BL Ingress in each cycles.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "UNC_I_RxR_BL_NCS_CYCLES_FULL",
        "EventCode": "0x6",
        "EventName": "UNC_I_RxR_BL_NCS_CYCLES_FULL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the BL Ingress is full.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "BL Ingress Occupancy - NCS",
        "EventCode": "0x3",
        "EventName": "UNC_I_RxR_BL_NCS_INSERTS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the BL Ingress.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "UNC_I_RxR_BL_NCS_OCCUPANCY",
        "EventCode": "0x9",
        "EventName": "UNC_I_RxR_BL_NCS_OCCUPANCY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the BL Ingress in each cycles.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Snoop Responses; Hit E or S",
        "EventCode": "0x17",
        "EventName": "UNC_I_SNOOP_RESP.HIT_ES",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_SNOOP_RESP.HIT_ES",
        "UMask": "0x4",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Snoop Responses; Hit I",
        "EventCode": "0x17",
        "EventName": "UNC_I_SNOOP_RESP.HIT_I",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_SNOOP_RESP.HIT_I",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Snoop Responses; Hit M",
        "EventCode": "0x17",
        "EventName": "UNC_I_SNOOP_RESP.HIT_M",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_SNOOP_RESP.HIT_M",
        "UMask": "0x8",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Snoop Responses; Miss",
        "EventCode": "0x17",
        "EventName": "UNC_I_SNOOP_RESP.MISS",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_SNOOP_RESP.MISS",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Snoop Responses; SnpCode",
        "EventCode": "0x17",
        "EventName": "UNC_I_SNOOP_RESP.SNPCODE",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_SNOOP_RESP.SNPCODE",
        "UMask": "0x10",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Snoop Responses; SnpData",
        "EventCode": "0x17",
        "EventName": "UNC_I_SNOOP_RESP.SNPDATA",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_SNOOP_RESP.SNPDATA",
        "UMask": "0x20",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Snoop Responses; SnpInv",
        "EventCode": "0x17",
        "EventName": "UNC_I_SNOOP_RESP.SNPINV",
        "PerPkg": "1",
        "PublicDescription": "UNC_I_SNOOP_RESP.SNPINV",
        "UMask": "0x40",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Inbound Transaction Count; Atomic",
        "EventCode": "0x16",
        "EventName": "UNC_I_TRANSACTIONS.ATOMIC",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of Inbound transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.; Tracks the number of atomic transactions",
        "UMask": "0x10",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Inbound Transaction Count; Other",
        "EventCode": "0x16",
        "EventName": "UNC_I_TRANSACTIONS.OTHER",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of Inbound transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.; Tracks the number of 'other' kinds of transactions.",
        "UMask": "0x20",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Inbound Transaction Count; Read Prefetches",
        "EventCode": "0x16",
        "EventName": "UNC_I_TRANSACTIONS.RD_PREF",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of Inbound transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.; Tracks the number of read prefetches.",
        "UMask": "0x4",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Inbound Transaction Count; Reads",
        "EventCode": "0x16",
        "EventName": "UNC_I_TRANSACTIONS.READS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of Inbound transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.; Tracks only read requests (not including read prefetches).",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Inbound Transaction Count; Writes",
        "EventCode": "0x16",
        "EventName": "UNC_I_TRANSACTIONS.WRITES",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of Inbound transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.; Tracks only write requests.  Each write request should have a prefetch, so there is no need to explicitly track these requests.",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Inbound Transaction Count; Write Prefetches",
        "EventCode": "0x16",
        "EventName": "UNC_I_TRANSACTIONS.WR_PREF",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of Inbound transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.; Tracks the number of write prefetches.",
        "UMask": "0x8",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "No AD Egress Credit Stalls",
        "EventCode": "0x18",
        "EventName": "UNC_I_TxR_AD_STALL_CREDIT_CYCLES",
        "PerPkg": "1",
        "PublicDescription": "Counts the number times when it is not possible to issue a request to the R2PCIe because there are no AD Egress Credits available.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "No BL Egress Credit Stalls",
        "EventCode": "0x19",
        "EventName": "UNC_I_TxR_BL_STALL_CREDIT_CYCLES",
        "PerPkg": "1",
        "PublicDescription": "Counts the number times when it is not possible to issue data to the R2PCIe because there are no BL Egress Credits available.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outbound Read Requests",
        "EventCode": "0xE",
        "EventName": "UNC_I_TxR_DATA_INSERTS_NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of requests issued to the switch (towards the devices).",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outbound Read Requests",
        "EventCode": "0xF",
        "EventName": "UNC_I_TxR_DATA_INSERTS_NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of requests issued to the switch (towards the devices).",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outbound Request Queue Occupancy",
        "EventCode": "0xD",
        "EventName": "UNC_I_TxR_REQUEST_OCCUPANCY",
        "PerPkg": "1",
        "PublicDescription": "Accumultes the number of outstanding outbound requests from the IRP to the switch (towards the devices).  This can be used in conjuection with the allocations event in order to calculate average latency of outbound requests.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Number of uclks in domain",
        "EventCode": "0x1",
        "EventName": "UNC_R2_CLOCKTICKS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of uclks in the R2PCIe uclk domain.  This could be slightly different than the count in the Ubox because of enable/freeze delays.  However, because the R2PCIe is close to the Ubox, they generally should not diverge by more than a handful of cycles.",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "UNC_R2_IIO_CREDIT.ISOCH_QPI0",
        "EventCode": "0x2D",
        "EventName": "UNC_R2_IIO_CREDIT.ISOCH_QPI0",
        "PerPkg": "1",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "UNC_R2_IIO_CREDIT.ISOCH_QPI1",
        "EventCode": "0x2D",
        "EventName": "UNC_R2_IIO_CREDIT.ISOCH_QPI1",
        "PerPkg": "1",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "UNC_R2_IIO_CREDIT.PRQ_QPI0",
        "EventCode": "0x2D",
        "EventName": "UNC_R2_IIO_CREDIT.PRQ_QPI0",
        "PerPkg": "1",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "UNC_R2_IIO_CREDIT.PRQ_QPI1",
        "EventCode": "0x2D",
        "EventName": "UNC_R2_IIO_CREDIT.PRQ_QPI1",
        "PerPkg": "1",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credit Acquired; DRS",
        "EventCode": "0x33",
        "EventName": "UNC_R2_IIO_CREDITS_ACQUIRED.DRS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the DRS message class.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credit Acquired; NCB",
        "EventCode": "0x33",
        "EventName": "UNC_R2_IIO_CREDITS_ACQUIRED.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCB message class.",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credit Acquired; NCS",
        "EventCode": "0x33",
        "EventName": "UNC_R2_IIO_CREDITS_ACQUIRED.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCS message class.",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credits in Use; DRS",
        "EventCode": "0x32",
        "EventName": "UNC_R2_IIO_CREDITS_USED.DRS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the DRS message class.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credits in Use; NCB",
        "EventCode": "0x32",
        "EventName": "UNC_R2_IIO_CREDITS_USED.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCB message class.",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credits in Use; NCS",
        "EventCode": "0x32",
        "EventName": "UNC_R2_IIO_CREDITS_USED.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCS message class.",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; All",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xf",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Counterclockwise",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xc",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Counterclockwise and Even",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CCW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Counterclockwise and Odd",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CCW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Clockwise",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x3",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Clockwise and Even",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Clockwise and Odd",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "AK Ingress Bounced; Dn",
        "EventCode": "0x12",
        "EventName": "UNC_R2_RING_AK_BOUNCES.DN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when a request destined for the AK ingress bounced.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "AK Ingress Bounced; Up",
        "EventCode": "0x12",
        "EventName": "UNC_R2_RING_AK_BOUNCES.UP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when a request destined for the AK ingress bounced.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; All",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xf",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Counterclockwise",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xc",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Counterclockwise and Even",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CCW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Counterclockwise and Odd",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CCW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Clockwise",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x3",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Clockwise and Even",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Clockwise and Odd",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; All",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xf",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Counterclockwise",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xc",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Counterclockwise and Even",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CCW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Counterclockwise and Odd",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CCW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Clockwise",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x3",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Clockwise and Even",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Clockwise and Odd",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 IV Ring in Use; Any",
        "EventCode": "0xA",
        "EventName": "UNC_R2_RING_IV_USED.ANY",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.",
        "UMask": "0xf",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 IV Ring in Use; Counterclockwise",
        "EventCode": "0xA",
        "EventName": "UNC_R2_RING_IV_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.",
        "UMask": "0xc",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 IV Ring in Use; Clockwise",
        "EventCode": "0xA",
        "EventName": "UNC_R2_RING_IV_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.",
        "UMask": "0x3",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Ingress Cycles Not Empty; NCB",
        "EventCode": "0x10",
        "EventName": "UNC_R2_RxR_CYCLES_NE.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Ingress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Ingress Cycles Not Empty; NCS",
        "EventCode": "0x10",
        "EventName": "UNC_R2_RxR_CYCLES_NE.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Ingress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Ingress Allocations; NCB",
        "EventCode": "0x11",
        "EventName": "UNC_R2_RxR_INSERTS.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the R2PCIe Ingress.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Ingress Allocations; NCS",
        "EventCode": "0x11",
        "EventName": "UNC_R2_RxR_INSERTS.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the R2PCIe Ingress.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Ingress Occupancy Accumulator; DRS",
        "EventCode": "0x13",
        "EventName": "UNC_R2_RxR_OCCUPANCY.DRS",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given R2PCIe Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the R2PCIe Ingress Not Empty event to calculate average occupancy or the R2PCIe Ingress Allocations event in order to calculate average queuing latency.; DRS Ingress Queue",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "SBo0 Credits Acquired; For AD Ring",
        "EventCode": "0x28",
        "EventName": "UNC_R2_SBO0_CREDITS_ACQUIRED.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits acquired in a given cycle, per ring.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "SBo0 Credits Acquired; For BL Ring",
        "EventCode": "0x28",
        "EventName": "UNC_R2_SBO0_CREDITS_ACQUIRED.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits acquired in a given cycle, per ring.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "SBo0 Credits Occupancy; For AD Ring",
        "EventCode": "0x2A",
        "EventName": "UNC_R2_SBO0_CREDIT_OCCUPANCY.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits in use in a given cycle, per ring.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "SBo0 Credits Occupancy; For BL Ring",
        "EventCode": "0x2A",
        "EventName": "UNC_R2_SBO0_CREDIT_OCCUPANCY.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits in use in a given cycle, per ring.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo0, AD Ring",
        "EventCode": "0x2C",
        "EventName": "UNC_R2_STALL_NO_SBO_CREDIT.SBO0_AD",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo0, BL Ring",
        "EventCode": "0x2C",
        "EventName": "UNC_R2_STALL_NO_SBO_CREDIT.SBO0_BL",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo1, AD Ring",
        "EventCode": "0x2C",
        "EventName": "UNC_R2_STALL_NO_SBO_CREDIT.SBO1_AD",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo1, BL Ring",
        "EventCode": "0x2C",
        "EventName": "UNC_R2_STALL_NO_SBO_CREDIT.SBO1_BL",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Full; AD",
        "EventCode": "0x25",
        "EventName": "UNC_R2_TxR_CYCLES_FULL.AD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress buffer is full.; AD Egress Queue",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Full; AK",
        "EventCode": "0x25",
        "EventName": "UNC_R2_TxR_CYCLES_FULL.AK",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress buffer is full.; AK Egress Queue",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Full; BL",
        "EventCode": "0x25",
        "EventName": "UNC_R2_TxR_CYCLES_FULL.BL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress buffer is full.; BL Egress Queue",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Not Empty; AD",
        "EventCode": "0x23",
        "EventName": "UNC_R2_TxR_CYCLES_NE.AD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.; AD Egress Queue",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Not Empty; AK",
        "EventCode": "0x23",
        "EventName": "UNC_R2_TxR_CYCLES_NE.AK",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.; AK Egress Queue",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Not Empty; BL",
        "EventCode": "0x23",
        "EventName": "UNC_R2_TxR_CYCLES_NE.BL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.; BL Egress Queue",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CCW NACK; AD CCW",
        "EventCode": "0x26",
        "EventName": "UNC_R2_TxR_NACK_CW.DN_AD",
        "PerPkg": "1",
        "PublicDescription": "AD CounterClockwise Egress Queue",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CCW NACK; AK CCW",
        "EventCode": "0x26",
        "EventName": "UNC_R2_TxR_NACK_CW.DN_AK",
        "PerPkg": "1",
        "PublicDescription": "AK CounterClockwise Egress Queue",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CCW NACK; BL CCW",
        "EventCode": "0x26",
        "EventName": "UNC_R2_TxR_NACK_CW.DN_BL",
        "PerPkg": "1",
        "PublicDescription": "BL CounterClockwise Egress Queue",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CCW NACK; AK CCW",
        "EventCode": "0x26",
        "EventName": "UNC_R2_TxR_NACK_CW.UP_AD",
        "PerPkg": "1",
        "PublicDescription": "BL CounterClockwise Egress Queue",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CCW NACK; BL CW",
        "EventCode": "0x26",
        "EventName": "UNC_R2_TxR_NACK_CW.UP_AK",
        "PerPkg": "1",
        "PublicDescription": "AD Clockwise Egress Queue",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CCW NACK; BL CCW",
        "EventCode": "0x26",
        "EventName": "UNC_R2_TxR_NACK_CW.UP_BL",
        "PerPkg": "1",
        "PublicDescription": "AD CounterClockwise Egress Queue",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Number of uclks in domain",
        "EventCode": "0x1",
        "EventName": "UNC_R3_CLOCKTICKS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of uclks in the QPI uclk domain.  This could be slightly different than the count in the Ubox because of enable/freeze delays.  However, because the QPI Agent is close to the Ubox, they generally should not diverge by more than a handful of cycles.",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x1F",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO10",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 10",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x1F",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO11",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 11",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x1F",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO12",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 12",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x1F",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO13",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 13",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x1F",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO14_16",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 14&16",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x1F",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO8",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 8",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x1F",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO9",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 9",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x1F",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO_15_17",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 15&17",
        "UMask": "0x80",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x22",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO0",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 0",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x22",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO1",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 1",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x22",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO2",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 2",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x22",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO3",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 3",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x22",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO4",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 4",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x22",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO5",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 5",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x22",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO6",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 6",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "EventCode": "0x22",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO7",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 7",
        "UMask": "0x80",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "HA/R2 AD Credits Empty",
        "EventCode": "0x2D",
        "EventName": "UNC_R3_HA_R2_BL_CREDITS_EMPTY.HA0",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to either HA or R2 on the BL Ring; HA0",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "HA/R2 AD Credits Empty",
        "EventCode": "0x2D",
        "EventName": "UNC_R3_HA_R2_BL_CREDITS_EMPTY.HA1",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to either HA or R2 on the BL Ring; HA1",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "HA/R2 AD Credits Empty",
        "EventCode": "0x2D",
        "EventName": "UNC_R3_HA_R2_BL_CREDITS_EMPTY.R2_NCB",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to either HA or R2 on the BL Ring; R2 NCB Messages",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "HA/R2 AD Credits Empty",
        "EventCode": "0x2D",
        "EventName": "UNC_R3_HA_R2_BL_CREDITS_EMPTY.R2_NCS",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to either HA or R2 on the BL Ring; R2 NCS Messages",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "IOT Backpressure",
        "EventCode": "0xB",
        "EventName": "UNC_R3_IOT_BACKPRESSURE.HUB",
        "PerPkg": "1",
        "PublicDescription": "UNC_R3_IOT_BACKPRESSURE.HUB",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "IOT Backpressure",
        "EventCode": "0xB",
        "EventName": "UNC_R3_IOT_BACKPRESSURE.SAT",
        "PerPkg": "1",
        "PublicDescription": "UNC_R3_IOT_BACKPRESSURE.SAT",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "IOT Common Trigger Sequencer - Hi",
        "EventCode": "0xD",
        "EventName": "UNC_R3_IOT_CTS_HI.CTS2",
        "PerPkg": "1",
        "PublicDescription": "Debug Mask/Match Tie-Ins",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "IOT Common Trigger Sequencer - Hi",
        "EventCode": "0xD",
        "EventName": "UNC_R3_IOT_CTS_HI.CTS3",
        "PerPkg": "1",
        "PublicDescription": "Debug Mask/Match Tie-Ins",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "IOT Common Trigger Sequencer - Lo",
        "EventCode": "0xC",
        "EventName": "UNC_R3_IOT_CTS_LO.CTS0",
        "PerPkg": "1",
        "PublicDescription": "Debug Mask/Match Tie-Ins",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "IOT Common Trigger Sequencer - Lo",
        "EventCode": "0xC",
        "EventName": "UNC_R3_IOT_CTS_LO.CTS1",
        "PerPkg": "1",
        "PublicDescription": "Debug Mask/Match Tie-Ins",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "EventCode": "0x20",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN0_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN0 HOM Messages",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "EventCode": "0x20",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN0_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN0 NDR Messages",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "EventCode": "0x20",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN0_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN0 SNP Messages",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "EventCode": "0x20",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN1_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN1 HOM Messages",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "EventCode": "0x20",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN1_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN1 NDR Messages",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "EventCode": "0x20",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN1_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN1 SNP Messages",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "EventCode": "0x20",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VNA",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VNA",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "EventCode": "0x21",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VN1_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VN1 HOM Messages",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "EventCode": "0x21",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VN1_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VN1 NDR Messages",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "EventCode": "0x21",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VN1_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VN1 SNP Messages",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "EventCode": "0x21",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VNA",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VNA",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "EventCode": "0x2E",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VN1_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VN1 HOM Messages",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "EventCode": "0x2E",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VN1_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VN1 NDR Messages",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "EventCode": "0x2E",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VN1_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VN1 SNP Messages",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "EventCode": "0x2E",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VNA",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VNA",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "EventCode": "0x2F",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN0_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN0 HOM Messages",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "EventCode": "0x2F",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN0_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN0 NDR Messages",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "EventCode": "0x2F",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN0_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN0 SNP Messages",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "EventCode": "0x2F",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN1_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN1 HOM Messages",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "EventCode": "0x2F",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN1_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN1 NDR Messages",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "EventCode": "0x2F",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN1_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN1 SNP Messages",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "EventCode": "0x2F",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VNA",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VNA",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; All",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xf",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Counterclockwise",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xc",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Counterclockwise and Even",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CCW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Counterclockwise and Odd",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CCW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Clockwise",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x3",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Clockwise and Even",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Clockwise and Odd",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; All",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xf",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Counterclockwise",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xc",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Counterclockwise and Even",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CCW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Counterclockwise and Odd",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CCW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Clockwise",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x3",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Clockwise and Even",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Clockwise and Odd",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; All",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xf",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Counterclockwise",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xc",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Counterclockwise and Even",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CCW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Counterclockwise and Odd",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CCW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Clockwise",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x3",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Clockwise and Even",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Clockwise and Odd",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 IV Ring in Use; Any",
        "EventCode": "0xA",
        "EventName": "UNC_R3_RING_IV_USED.ANY",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.",
        "UMask": "0xf",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 IV Ring in Use; Clockwise",
        "EventCode": "0xA",
        "EventName": "UNC_R3_RING_IV_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.",
        "UMask": "0x3",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ring Stop Starved; AK",
        "EventCode": "0xE",
        "EventName": "UNC_R3_RING_SINK_STARVED.AK",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles the ringstop is in starvation (per ring)",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Cycles Not Empty; HOM",
        "EventCode": "0x10",
        "EventName": "UNC_R3_RxR_CYCLES_NE.HOM",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; HOM Ingress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Cycles Not Empty; NDR",
        "EventCode": "0x10",
        "EventName": "UNC_R3_RxR_CYCLES_NE.NDR",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NDR Ingress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Cycles Not Empty; SNP",
        "EventCode": "0x10",
        "EventName": "UNC_R3_RxR_CYCLES_NE.SNP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; SNP Ingress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Cycles Not Empty; DRS",
        "EventCode": "0x14",
        "EventName": "UNC_R3_RxR_CYCLES_NE_VN1.DRS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; DRS Ingress Queue",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Cycles Not Empty; HOM",
        "EventCode": "0x14",
        "EventName": "UNC_R3_RxR_CYCLES_NE_VN1.HOM",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; HOM Ingress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Cycles Not Empty; NCB",
        "EventCode": "0x14",
        "EventName": "UNC_R3_RxR_CYCLES_NE_VN1.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Cycles Not Empty; NCS",
        "EventCode": "0x14",
        "EventName": "UNC_R3_RxR_CYCLES_NE_VN1.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Cycles Not Empty; NDR",
        "EventCode": "0x14",
        "EventName": "UNC_R3_RxR_CYCLES_NE_VN1.NDR",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NDR Ingress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Cycles Not Empty; SNP",
        "EventCode": "0x14",
        "EventName": "UNC_R3_RxR_CYCLES_NE_VN1.SNP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; SNP Ingress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; DRS",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.DRS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; DRS Ingress Queue",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; HOM",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.HOM",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; HOM Ingress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; NCB",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; NCS",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; NDR",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.NDR",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NDR Ingress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; SNP",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.SNP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; SNP Ingress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Allocations; DRS",
        "EventCode": "0x15",
        "EventName": "UNC_R3_RxR_INSERTS_VN1.DRS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; DRS Ingress Queue",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Allocations; HOM",
        "EventCode": "0x15",
        "EventName": "UNC_R3_RxR_INSERTS_VN1.HOM",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; HOM Ingress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Allocations; NCB",
        "EventCode": "0x15",
        "EventName": "UNC_R3_RxR_INSERTS_VN1.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Allocations; NCS",
        "EventCode": "0x15",
        "EventName": "UNC_R3_RxR_INSERTS_VN1.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Allocations; NDR",
        "EventCode": "0x15",
        "EventName": "UNC_R3_RxR_INSERTS_VN1.NDR",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NDR Ingress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Allocations; SNP",
        "EventCode": "0x15",
        "EventName": "UNC_R3_RxR_INSERTS_VN1.SNP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; SNP Ingress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Occupancy Accumulator; DRS",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY_VN1.DRS",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; DRS Ingress Queue",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Occupancy Accumulator; HOM",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY_VN1.HOM",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; HOM Ingress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Occupancy Accumulator; NCB",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY_VN1.NCB",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; NCB Ingress Queue",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Occupancy Accumulator; NCS",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY_VN1.NCS",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; NCS Ingress Queue",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Occupancy Accumulator; NDR",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY_VN1.NDR",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; NDR Ingress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Ingress Occupancy Accumulator; SNP",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY_VN1.SNP",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; SNP Ingress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "SBo0 Credits Acquired; For AD Ring",
        "EventCode": "0x28",
        "EventName": "UNC_R3_SBO0_CREDITS_ACQUIRED.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits acquired in a given cycle, per ring.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "SBo0 Credits Acquired; For BL Ring",
        "EventCode": "0x28",
        "EventName": "UNC_R3_SBO0_CREDITS_ACQUIRED.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits acquired in a given cycle, per ring.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "SBo0 Credits Occupancy; For AD Ring",
        "EventCode": "0x2A",
        "EventName": "UNC_R3_SBO0_CREDIT_OCCUPANCY.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits in use in a given cycle, per ring.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "SBo0 Credits Occupancy; For BL Ring",
        "EventCode": "0x2A",
        "EventName": "UNC_R3_SBO0_CREDIT_OCCUPANCY.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits in use in a given cycle, per ring.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "SBo1 Credits Acquired; For AD Ring",
        "EventCode": "0x29",
        "EventName": "UNC_R3_SBO1_CREDITS_ACQUIRED.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 1 credits acquired in a given cycle, per ring.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "SBo1 Credits Acquired; For BL Ring",
        "EventCode": "0x29",
        "EventName": "UNC_R3_SBO1_CREDITS_ACQUIRED.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 1 credits acquired in a given cycle, per ring.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "SBo1 Credits Occupancy; For AD Ring",
        "EventCode": "0x2B",
        "EventName": "UNC_R3_SBO1_CREDIT_OCCUPANCY.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 1 credits in use in a given cycle, per ring.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "SBo1 Credits Occupancy; For BL Ring",
        "EventCode": "0x2B",
        "EventName": "UNC_R3_SBO1_CREDIT_OCCUPANCY.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 1 credits in use in a given cycle, per ring.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo0, AD Ring",
        "EventCode": "0x2C",
        "EventName": "UNC_R3_STALL_NO_SBO_CREDIT.SBO0_AD",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo0, BL Ring",
        "EventCode": "0x2C",
        "EventName": "UNC_R3_STALL_NO_SBO_CREDIT.SBO0_BL",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo1, AD Ring",
        "EventCode": "0x2C",
        "EventName": "UNC_R3_STALL_NO_SBO_CREDIT.SBO1_AD",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo1, BL Ring",
        "EventCode": "0x2C",
        "EventName": "UNC_R3_STALL_NO_SBO_CREDIT.SBO1_BL",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress CCW NACK; AD CCW",
        "EventCode": "0x26",
        "EventName": "UNC_R3_TxR_NACK.DN_AD",
        "PerPkg": "1",
        "PublicDescription": "AD CounterClockwise Egress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress CCW NACK; AK CCW",
        "EventCode": "0x26",
        "EventName": "UNC_R3_TxR_NACK.DN_AK",
        "PerPkg": "1",
        "PublicDescription": "AK CounterClockwise Egress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress CCW NACK; BL CCW",
        "EventCode": "0x26",
        "EventName": "UNC_R3_TxR_NACK.DN_BL",
        "PerPkg": "1",
        "PublicDescription": "BL CounterClockwise Egress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress CCW NACK; AK CCW",
        "EventCode": "0x26",
        "EventName": "UNC_R3_TxR_NACK.UP_AD",
        "PerPkg": "1",
        "PublicDescription": "BL CounterClockwise Egress Queue",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress CCW NACK; BL CW",
        "EventCode": "0x26",
        "EventName": "UNC_R3_TxR_NACK.UP_AK",
        "PerPkg": "1",
        "PublicDescription": "AD Clockwise Egress Queue",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress CCW NACK; BL CCW",
        "EventCode": "0x26",
        "EventName": "UNC_R3_TxR_NACK.UP_BL",
        "PerPkg": "1",
        "PublicDescription": "AD CounterClockwise Egress Queue",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; DRS Message Class",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.DRS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; HOM Message Class",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.HOM",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; NCB Message Class",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.NCB",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns.",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; NCS Message Class",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.NCS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; NDR Message Class",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.NDR",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP).",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; SNP Message Class",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.SNP",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; DRS Message Class",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.DRS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; HOM Message Class",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.HOM",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; NCB Message Class",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.NCB",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns.",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; NCS Message Class",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.NCS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; NDR Message Class",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.NDR",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP).",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; SNP Message Class",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.SNP",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; DRS Message Class",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.DRS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; HOM Message Class",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.HOM",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; NCB Message Class",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.NCB",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns.",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; NCS Message Class",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.NCS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; NDR Message Class",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.NDR",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP).",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; SNP Message Class",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.SNP",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; DRS Message Class",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.DRS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; HOM Message Class",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.HOM",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; NCB Message Class",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.NCB",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns.",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; NCS Message Class",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.NCS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; NDR Message Class",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.NDR",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP).",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; SNP Message Class",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.SNP",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA credit Acquisitions; HOM Message Class",
        "EventCode": "0x33",
        "EventName": "UNC_R3_VNA_CREDITS_ACQUIRED.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of QPI VNA Credit acquisitions.  This event can be used in conjunction with the VNA In-Use Accumulator to calculate the average lifetime of a credit holder.  VNA credits are used by all message classes in order to communicate across QPI.  If a packet is unable to acquire credits, it will then attempt to use credts from the VN0 pool.  Note that a single packet may require multiple flit buffers (i.e. when data is being transferred).  Therefore, this event will increment by the number of credits acquired in each cycle.  Filtering based on message class is not provided.  One can count the number of packets transferred in a given message class using an qfclk event.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA credit Acquisitions; HOM Message Class",
        "EventCode": "0x33",
        "EventName": "UNC_R3_VNA_CREDITS_ACQUIRED.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of QPI VNA Credit acquisitions.  This event can be used in conjunction with the VNA In-Use Accumulator to calculate the average lifetime of a credit holder.  VNA credits are used by all message classes in order to communicate across QPI.  If a packet is unable to acquire credits, it will then attempt to use credts from the VN0 pool.  Note that a single packet may require multiple flit buffers (i.e. when data is being transferred).  Therefore, this event will increment by the number of credits acquired in each cycle.  Filtering based on message class is not provided.  One can count the number of packets transferred in a given message class using an qfclk event.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; DRS Message Class",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.DRS",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; HOM Message Class",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.HOM",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; NCB Message Class",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.NCB",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns.",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; NCS Message Class",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.NCS",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Non-Coherent Standard (NCS).",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; NDR Message Class",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.NDR",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP).",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; SNP Message Class",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.SNP",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Bounce Control",
        "EventCode": "0xA",
        "EventName": "UNC_S_BOUNCE_CONTROL",
        "PerPkg": "1",
        "PublicDescription": "UNC_S_BOUNCE_CONTROL",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Uncore Clocks",
        "EventName": "UNC_S_CLOCKTICKS",
        "PerPkg": "1",
        "PublicDescription": "UNC_S_CLOCKTICKS",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "FaST wire asserted",
        "EventCode": "0x9",
        "EventName": "UNC_S_FAST_ASSERTED",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles either the local or incoming distress signals are asserted.  Incoming distress includes up, dn and across.",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AD Ring In Use; All",
        "EventCode": "0x1B",
        "EventName": "UNC_S_RING_AD_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xf",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AD Ring In Use; Down",
        "EventCode": "0x1B",
        "EventName": "UNC_S_RING_AD_USED.DOWN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xc",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AD Ring In Use; Down and Event",
        "EventCode": "0x1B",
        "EventName": "UNC_S_RING_AD_USED.DOWN_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Event ring polarity.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AD Ring In Use; Down and Odd",
        "EventCode": "0x1B",
        "EventName": "UNC_S_RING_AD_USED.DOWN_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AD Ring In Use; Up",
        "EventCode": "0x1B",
        "EventName": "UNC_S_RING_AD_USED.UP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0x3",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AD Ring In Use; Up and Even",
        "EventCode": "0x1B",
        "EventName": "UNC_S_RING_AD_USED.UP_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AD Ring In Use; Up and Odd",
        "EventCode": "0x1B",
        "EventName": "UNC_S_RING_AD_USED.UP_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AK Ring In Use; All",
        "EventCode": "0x1C",
        "EventName": "UNC_S_RING_AK_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xf",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AK Ring In Use; Down",
        "EventCode": "0x1C",
        "EventName": "UNC_S_RING_AK_USED.DOWN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xc",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AK Ring In Use; Down and Event",
        "EventCode": "0x1C",
        "EventName": "UNC_S_RING_AK_USED.DOWN_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Event ring polarity.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AK Ring In Use; Down and Odd",
        "EventCode": "0x1C",
        "EventName": "UNC_S_RING_AK_USED.DOWN_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AK Ring In Use; Up",
        "EventCode": "0x1C",
        "EventName": "UNC_S_RING_AK_USED.UP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0x3",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AK Ring In Use; Up and Even",
        "EventCode": "0x1C",
        "EventName": "UNC_S_RING_AK_USED.UP_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "AK Ring In Use; Up and Odd",
        "EventCode": "0x1C",
        "EventName": "UNC_S_RING_AK_USED.UP_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "BL Ring in Use; All",
        "EventCode": "0x1D",
        "EventName": "UNC_S_RING_BL_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xf",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "BL Ring in Use; Down",
        "EventCode": "0x1D",
        "EventName": "UNC_S_RING_BL_USED.DOWN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xc",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "BL Ring in Use; Down and Event",
        "EventCode": "0x1D",
        "EventName": "UNC_S_RING_BL_USED.DOWN_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Event ring polarity.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "BL Ring in Use; Down and Odd",
        "EventCode": "0x1D",
        "EventName": "UNC_S_RING_BL_USED.DOWN_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "BL Ring in Use; Up",
        "EventCode": "0x1D",
        "EventName": "UNC_S_RING_BL_USED.UP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0x3",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "BL Ring in Use; Up and Even",
        "EventCode": "0x1D",
        "EventName": "UNC_S_RING_BL_USED.UP_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "BL Ring in Use; Up and Odd",
        "EventCode": "0x1D",
        "EventName": "UNC_S_RING_BL_USED.UP_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in BDX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Number of LLC responses that bounced on the Ring.",
        "EventCode": "0x5",
        "EventName": "UNC_S_RING_BOUNCES.AD_CACHE",
        "PerPkg": "1",
        "PublicDescription": "UNC_S_RING_BOUNCES.AD_CACHE",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Number of LLC responses that bounced on the Ring.; Acknowledgements to core",
        "EventCode": "0x5",
        "EventName": "UNC_S_RING_BOUNCES.AK_CORE",
        "PerPkg": "1",
        "PublicDescription": "UNC_S_RING_BOUNCES.AK_CORE",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Number of LLC responses that bounced on the Ring.; Data Responses to core",
        "EventCode": "0x5",
        "EventName": "UNC_S_RING_BOUNCES.BL_CORE",
        "PerPkg": "1",
        "PublicDescription": "UNC_S_RING_BOUNCES.BL_CORE",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Number of LLC responses that bounced on the Ring.; Snoops of processor's cache.",
        "EventCode": "0x5",
        "EventName": "UNC_S_RING_BOUNCES.IV_CORE",
        "PerPkg": "1",
        "PublicDescription": "UNC_S_RING_BOUNCES.IV_CORE",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "BL Ring in Use; Any",
        "EventCode": "0x1E",
        "EventName": "UNC_S_RING_IV_USED.DN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  There is only 1 IV ring in HSX.  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters any polarity",
        "UMask": "0xc",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "BL Ring in Use; Any",
        "EventCode": "0x1E",
        "EventName": "UNC_S_RING_IV_USED.UP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  There is only 1 IV ring in HSX.  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters any polarity",
        "UMask": "0x3",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "UNC_S_RING_SINK_STARVED.AD_CACHE",
        "EventCode": "0x6",
        "EventName": "UNC_S_RING_SINK_STARVED.AD_CACHE",
        "PerPkg": "1",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "UNC_S_RING_SINK_STARVED.AK_CORE",
        "EventCode": "0x6",
        "EventName": "UNC_S_RING_SINK_STARVED.AK_CORE",
        "PerPkg": "1",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "UNC_S_RING_SINK_STARVED.BL_CORE",
        "EventCode": "0x6",
        "EventName": "UNC_S_RING_SINK_STARVED.BL_CORE",
        "PerPkg": "1",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "UNC_S_RING_SINK_STARVED.IV_CORE",
        "EventCode": "0x6",
        "EventName": "UNC_S_RING_SINK_STARVED.IV_CORE",
        "PerPkg": "1",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; AD - Bounces",
        "EventCode": "0x15",
        "EventName": "UNC_S_RxR_BUSY_STARVED.AD_BNC",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress because a message (credited/bounceable) is  being sent.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; AD - Credits",
        "EventCode": "0x15",
        "EventName": "UNC_S_RxR_BUSY_STARVED.AD_CRD",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress because a message (credited/bounceable) is  being sent.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; BL - Bounces",
        "EventCode": "0x15",
        "EventName": "UNC_S_RxR_BUSY_STARVED.BL_BNC",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress because a message (credited/bounceable) is  being sent.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; BL - Credits",
        "EventCode": "0x15",
        "EventName": "UNC_S_RxR_BUSY_STARVED.BL_CRD",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress because a message (credited/bounceable) is  being sent.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Bypass; AD - Bounces",
        "EventCode": "0x12",
        "EventName": "UNC_S_RxR_BYPASS.AD_BNC",
        "PerPkg": "1",
        "PublicDescription": "Bypass the Sbo Ingress.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Bypass; AD - Credits",
        "EventCode": "0x12",
        "EventName": "UNC_S_RxR_BYPASS.AD_CRD",
        "PerPkg": "1",
        "PublicDescription": "Bypass the Sbo Ingress.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Bypass; AK",
        "EventCode": "0x12",
        "EventName": "UNC_S_RxR_BYPASS.AK",
        "PerPkg": "1",
        "PublicDescription": "Bypass the Sbo Ingress.",
        "UMask": "0x10",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Bypass; BL - Bounces",
        "EventCode": "0x12",
        "EventName": "UNC_S_RxR_BYPASS.BL_BNC",
        "PerPkg": "1",
        "PublicDescription": "Bypass the Sbo Ingress.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Bypass; BL - Credits",
        "EventCode": "0x12",
        "EventName": "UNC_S_RxR_BYPASS.BL_CRD",
        "PerPkg": "1",
        "PublicDescription": "Bypass the Sbo Ingress.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Bypass; IV",
        "EventCode": "0x12",
        "EventName": "UNC_S_RxR_BYPASS.IV",
        "PerPkg": "1",
        "PublicDescription": "Bypass the Sbo Ingress.",
        "UMask": "0x20",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; AD - Bounces",
        "EventCode": "0x14",
        "EventName": "UNC_S_RxR_CRD_STARVED.AD_BNC",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; AD - Credits",
        "EventCode": "0x14",
        "EventName": "UNC_S_RxR_CRD_STARVED.AD_CRD",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; AK",
        "EventCode": "0x14",
        "EventName": "UNC_S_RxR_CRD_STARVED.AK",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit.",
        "UMask": "0x10",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; BL - Bounces",
        "EventCode": "0x14",
        "EventName": "UNC_S_RxR_CRD_STARVED.BL_BNC",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; BL - Credits",
        "EventCode": "0x14",
        "EventName": "UNC_S_RxR_CRD_STARVED.BL_CRD",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; IVF Credit",
        "EventCode": "0x14",
        "EventName": "UNC_S_RxR_CRD_STARVED.IFV",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit.",
        "UMask": "0x40",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; IV",
        "EventCode": "0x14",
        "EventName": "UNC_S_RxR_CRD_STARVED.IV",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit.",
        "UMask": "0x20",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Allocations; AD - Bounces",
        "EventCode": "0x13",
        "EventName": "UNC_S_RxR_INSERTS.AD_BNC",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Allocations; AD - Credits",
        "EventCode": "0x13",
        "EventName": "UNC_S_RxR_INSERTS.AD_CRD",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Allocations; AK",
        "EventCode": "0x13",
        "EventName": "UNC_S_RxR_INSERTS.AK",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x10",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Allocations; BL - Bounces",
        "EventCode": "0x13",
        "EventName": "UNC_S_RxR_INSERTS.BL_BNC",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Allocations; BL - Credits",
        "EventCode": "0x13",
        "EventName": "UNC_S_RxR_INSERTS.BL_CRD",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Allocations; IV",
        "EventCode": "0x13",
        "EventName": "UNC_S_RxR_INSERTS.IV",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x20",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Occupancy; AD - Bounces",
        "EventCode": "0x11",
        "EventName": "UNC_S_RxR_OCCUPANCY.AD_BNC",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Occupancy; AD - Credits",
        "EventCode": "0x11",
        "EventName": "UNC_S_RxR_OCCUPANCY.AD_CRD",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Occupancy; AK",
        "EventCode": "0x11",
        "EventName": "UNC_S_RxR_OCCUPANCY.AK",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x10",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Occupancy; BL - Bounces",
        "EventCode": "0x11",
        "EventName": "UNC_S_RxR_OCCUPANCY.BL_BNC",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Occupancy; BL - Credits",
        "EventCode": "0x11",
        "EventName": "UNC_S_RxR_OCCUPANCY.BL_CRD",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Ingress Occupancy; IV",
        "EventCode": "0x11",
        "EventName": "UNC_S_RxR_OCCUPANCY.IV",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring.",
        "UMask": "0x20",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "UNC_S_TxR_ADS_USED.AD",
        "EventCode": "0x4",
        "EventName": "UNC_S_TxR_ADS_USED.AD",
        "PerPkg": "1",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "UNC_S_TxR_ADS_USED.AK",
        "EventCode": "0x4",
        "EventName": "UNC_S_TxR_ADS_USED.AK",
        "PerPkg": "1",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "UNC_S_TxR_ADS_USED.BL",
        "EventCode": "0x4",
        "EventName": "UNC_S_TxR_ADS_USED.BL",
        "PerPkg": "1",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Allocations; AD - Bounces",
        "EventCode": "0x2",
        "EventName": "UNC_S_TxR_INSERTS.AD_BNC",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Allocations; AD - Credits",
        "EventCode": "0x2",
        "EventName": "UNC_S_TxR_INSERTS.AD_CRD",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Allocations; AK",
        "EventCode": "0x2",
        "EventName": "UNC_S_TxR_INSERTS.AK",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring.",
        "UMask": "0x10",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Allocations; BL - Bounces",
        "EventCode": "0x2",
        "EventName": "UNC_S_TxR_INSERTS.BL_BNC",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Allocations; BL - Credits",
        "EventCode": "0x2",
        "EventName": "UNC_S_TxR_INSERTS.BL_CRD",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Allocations; IV",
        "EventCode": "0x2",
        "EventName": "UNC_S_TxR_INSERTS.IV",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring.",
        "UMask": "0x20",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Occupancy; AD - Bounces",
        "EventCode": "0x1",
        "EventName": "UNC_S_TxR_OCCUPANCY.AD_BNC",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Occupancy; AD - Credits",
        "EventCode": "0x1",
        "EventName": "UNC_S_TxR_OCCUPANCY.AD_CRD",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Occupancy; AK",
        "EventCode": "0x1",
        "EventName": "UNC_S_TxR_OCCUPANCY.AK",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring.",
        "UMask": "0x10",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Occupancy; BL - Bounces",
        "EventCode": "0x1",
        "EventName": "UNC_S_TxR_OCCUPANCY.BL_BNC",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Occupancy; BL - Credits",
        "EventCode": "0x1",
        "EventName": "UNC_S_TxR_OCCUPANCY.BL_CRD",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Egress Occupancy; IV",
        "EventCode": "0x1",
        "EventName": "UNC_S_TxR_OCCUPANCY.IV",
        "PerPkg": "1",
        "PublicDescription": "Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring.",
        "UMask": "0x20",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; Onto AD Ring",
        "EventCode": "0x3",
        "EventName": "UNC_S_TxR_STARVED.AD",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.",
        "UMask": "0x1",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; Onto AK Ring",
        "EventCode": "0x3",
        "EventName": "UNC_S_TxR_STARVED.AK",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.",
        "UMask": "0x2",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; Onto BL Ring",
        "EventCode": "0x3",
        "EventName": "UNC_S_TxR_STARVED.BL",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.",
        "UMask": "0x4",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Injection Starvation; Onto IV Ring",
        "EventCode": "0x3",
        "EventName": "UNC_S_TxR_STARVED.IV",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.",
        "UMask": "0x8",
        "Unit": "SBO"
    },
    {
        "BriefDescription": "Clockticks in the UBOX using a dedicated 48-bit Fixed Counter",
        "EventCode": "0xff",
        "EventName": "UNC_U_CLOCKTICKS",
        "PerPkg": "1",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "VLW Received",
        "EventCode": "0x42",
        "EventName": "UNC_U_EVENT_MSG.DOORBELL_RCVD",
        "PerPkg": "1",
        "PublicDescription": "Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x8",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Filter Match",
        "EventCode": "0x41",
        "EventName": "UNC_U_FILTER_MATCH.DISABLE",
        "PerPkg": "1",
        "PublicDescription": "Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x2",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Filter Match",
        "EventCode": "0x41",
        "EventName": "UNC_U_FILTER_MATCH.ENABLE",
        "PerPkg": "1",
        "PublicDescription": "Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x1",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Filter Match",
        "EventCode": "0x41",
        "EventName": "UNC_U_FILTER_MATCH.U2C_DISABLE",
        "PerPkg": "1",
        "PublicDescription": "Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x8",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Filter Match",
        "EventCode": "0x41",
        "EventName": "UNC_U_FILTER_MATCH.U2C_ENABLE",
        "PerPkg": "1",
        "PublicDescription": "Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x4",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Cycles PHOLD Assert to Ack; Assert to ACK",
        "EventCode": "0x45",
        "EventName": "UNC_U_PHOLD_CYCLES.ASSERT_TO_ACK",
        "PerPkg": "1",
        "PublicDescription": "PHOLD cycles.  Filter from source CoreID.",
        "UMask": "0x1",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "RACU Request",
        "EventCode": "0x46",
        "EventName": "UNC_U_RACU_REQUESTS",
        "PerPkg": "1",
        "PublicDescription": "Number outstanding register requests within message channel tracker",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Correctable Machine Check",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.CMC",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores",
        "UMask": "0x10",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Livelock",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.LIVELOCK",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores; Filter by core",
        "UMask": "0x4",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; LTError",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.LTERROR",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores; Filter by core",
        "UMask": "0x8",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Monitor T0",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.MONITOR_T0",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores; Filter by core",
        "UMask": "0x1",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Monitor T1",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.MONITOR_T1",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores; Filter by core",
        "UMask": "0x2",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Other",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.OTHER",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores; PREQ, PSMI, P2U, Thermal, PCUSMI, PMI",
        "UMask": "0x80",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Trap",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.TRAP",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores",
        "UMask": "0x40",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Uncorrectable Machine Check",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.UMC",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores",
        "UMask": "0x20",
        "Unit": "UBOX"
    }
]
